作为我们论文的结论，我们现在评估我们实现的FATAL+算法的属性在多大程度上符合我们的设计目标，这些属性已经在我们的建模框架内得到了表达和验证，并在实验中进行了测试。此外，我们将讨论一些潜在的改进和未来的研究途径。我们的论述将遵循2.1.7节中列出的优化标准。·面积消耗：对于合适的实现，每个节点的门总数为O(Nlogn)。这可以通过观察阈值门的复杂性主导门的渐近数量来看出，因为节点的O(N)个剩余组件每个都具有恒定数量的门；使用排序网络来实现阈值门，所述复杂性界限遵循[48]。微不足道的是，这个门的数量是最优的O(LogN)的一个因子。我们推测，事实上，这种复杂性是渐近最优的，除非有人愿意牺牲算法的其他期望属性(例如，最优弹性)。假设节点的门复杂性足以表示算法的面积消耗，我们的结论是我们的解决方案在这方面是令人满意的。·通信复杂性：我们的实现使用7(1比特)线每通道，并且主状态机的状态的顺序编码将把这个数字减少到5。所有的通信都是广播。考虑到任务的复杂性，改进的空间似乎非常有限。·稳定时间：我们的算法在最坏的情况下稳定时间为O(N)。最近的发现[49]表明，多对数稳定时间可以在较低的通信复杂性下实现；然而，这是以次优弹性为代价的，较弱的对抗性模型，最重要的是，在复杂性界限中的常量使得所得到的算法在任何实际参数范围内都不如我们的解。此外，正如在[13]中形式化和在第7节中演示的那样，对于广泛的场景，我们的算法实现了恒定的稳定时间。考虑到严重故障模型，我们的结论是，尽管不是最优的，我们的算法在这一质量度量方面的性能令人满意。·弹性：已知3f+1节点对于容忍f个错误是必需的[25，14]，除非有可用的密码工具。由于密码工具带来的复杂性在我们的设置中是令人望而却步的，我们的算法具有最佳的弹性。·延迟：正如前面提到的，线路的延迟不在我们的控制范围之内。考虑到快周期机器中的dmin+和dmax+，我们在最终频率/同步权衡方面充分利用了可用的界限。在节点处执行的计算所引起的延迟与所涉及的电路的深度成正比。同样，门限门的实现是这里的主要成本因素。由Ajtai等人建立的分类网络。[48]显示深度O(Logn)。假设门的扇入恒定，如果下一步何时增加逻辑时钟Lv的决定确实取决于来自远程节点的所有n个−1输入信号v，则这显然是渐近最优的。我们的结论是，在我们的控制范围内，我们的算法满足了最小化延迟的设计目标。·亚稳定：我们在第6节讨论了几种防止亚稳定的有效措施。我们的实验支持了我们的理论发现，在稳定之后，在没有进一步故障的情况下，亚稳定可能不会发生。然而，由于亚稳性是一个难以捉摸的问题，很难将洞察和观察转移到给定系统的其他操作模式--更不用说不同的实现技术--亚稳性的数学处理是非常可取的。我们的模型为这个问题开辟了各种可能的途径。首先，用信号电压作为时间的连续函数来更准确地描述信号是可行的。选择中等复杂度的另一个选项将是为表示例如爬行或振荡信号的“无效”信号添加额外的信号状态(例如⊥)。将亚稳性传播和衰变的适当概率分配给模块，这将使得能够使用离散状态表示在建模框架内对亚稳性的产生、传播和衰变进行统一的概率分析。这样的方法可以为系统恢复提供完全无条件的保证；相反，我们目前的描述需要一个先验保证，即在稳定过程中充分包含亚稳定。·连通性：本文提出的算法需要连接所有节点对，因此不可扩展。遗憾的是，在最坏的情况下，要容忍f∈Ω(N)故障，需要使用Ω(N2)链路[26，27]。我们主张故障节点的最坏情况行为的假设；然而，典型系统不会在系统内表现出最坏情况的故障分布似乎是合理的。事实上，许多有趣的情景证明，有理由假设故障的分布要良性得多。在故障以恒定的节点故障概率均匀且独立地随机分布的极端情况下，节点度∈O(Clogn)将足以保证(在给定时间点)任何节点的多于−/9的邻居故障的概率至多为1Δ1/Nc。请注意，这意味着直到该属性被违反的平均时间随系统大小呈多项式增长。在较小的子系统(少于Δ个节点)中使用FATAL+协议，与从头开始相比，实现系统范围的同步将容易得多。在此设置中，∈O(ΔLOGN)将替换FATAL+算法的所有复杂度界限中的n，特别是导致每个节点的门复杂度O(LOGLOGN)，计算
